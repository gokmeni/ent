// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/gokmeni/ent/ent/customer"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
}

// SetCompanyName sets the companyName field.
func (cc *CustomerCreate) SetCompanyName(s string) *CustomerCreate {
	cc.mutation.SetCompanyName(s)
	return cc
}

// SetContactName sets the contactName field.
func (cc *CustomerCreate) SetContactName(s string) *CustomerCreate {
	cc.mutation.SetContactName(s)
	return cc
}

// SetContactTitle sets the contactTitle field.
func (cc *CustomerCreate) SetContactTitle(s string) *CustomerCreate {
	cc.mutation.SetContactTitle(s)
	return cc
}

// SetAddress sets the address field.
func (cc *CustomerCreate) SetAddress(s string) *CustomerCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetCity sets the city field.
func (cc *CustomerCreate) SetCity(s string) *CustomerCreate {
	cc.mutation.SetCity(s)
	return cc
}

// SetRegion sets the region field.
func (cc *CustomerCreate) SetRegion(s string) *CustomerCreate {
	cc.mutation.SetRegion(s)
	return cc
}

// SetPostalCode sets the postalCode field.
func (cc *CustomerCreate) SetPostalCode(s string) *CustomerCreate {
	cc.mutation.SetPostalCode(s)
	return cc
}

// SetCountry sets the country field.
func (cc *CustomerCreate) SetCountry(s string) *CustomerCreate {
	cc.mutation.SetCountry(s)
	return cc
}

// SetPhone sets the phone field.
func (cc *CustomerCreate) SetPhone(s string) *CustomerCreate {
	cc.mutation.SetPhone(s)
	return cc
}

// SetFax sets the fax field.
func (cc *CustomerCreate) SetFax(s string) *CustomerCreate {
	cc.mutation.SetFax(s)
	return cc
}

// SetID sets the id field.
func (cc *CustomerCreate) SetID(s string) *CustomerCreate {
	cc.mutation.SetID(s)
	return cc
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	if _, ok := cc.mutation.CompanyName(); !ok {
		return nil, errors.New("ent: missing required field \"companyName\"")
	}
	if _, ok := cc.mutation.ContactName(); !ok {
		return nil, errors.New("ent: missing required field \"contactName\"")
	}
	if _, ok := cc.mutation.ContactTitle(); !ok {
		return nil, errors.New("ent: missing required field \"contactTitle\"")
	}
	if _, ok := cc.mutation.Address(); !ok {
		return nil, errors.New("ent: missing required field \"address\"")
	}
	if _, ok := cc.mutation.City(); !ok {
		return nil, errors.New("ent: missing required field \"city\"")
	}
	if _, ok := cc.mutation.Region(); !ok {
		return nil, errors.New("ent: missing required field \"region\"")
	}
	if _, ok := cc.mutation.PostalCode(); !ok {
		return nil, errors.New("ent: missing required field \"postalCode\"")
	}
	if _, ok := cc.mutation.Country(); !ok {
		return nil, errors.New("ent: missing required field \"country\"")
	}
	if _, ok := cc.mutation.Phone(); !ok {
		return nil, errors.New("ent: missing required field \"phone\"")
	}
	if _, ok := cc.mutation.Fax(); !ok {
		return nil, errors.New("ent: missing required field \"fax\"")
	}
	var (
		err  error
		node *Customer
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	var (
		c     = &Customer{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: customer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: customer.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		c.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CompanyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldCompanyName,
		})
		c.CompanyName = value
	}
	if value, ok := cc.mutation.ContactName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldContactName,
		})
		c.ContactName = value
	}
	if value, ok := cc.mutation.ContactTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldContactTitle,
		})
		c.ContactTitle = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldAddress,
		})
		c.Address = value
	}
	if value, ok := cc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldCity,
		})
		c.City = value
	}
	if value, ok := cc.mutation.Region(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldRegion,
		})
		c.Region = value
	}
	if value, ok := cc.mutation.PostalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldPostalCode,
		})
		c.PostalCode = value
	}
	if value, ok := cc.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldCountry,
		})
		c.Country = value
	}
	if value, ok := cc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldPhone,
		})
		c.Phone = value
	}
	if value, ok := cc.mutation.Fax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldFax,
		})
		c.Fax = value
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
